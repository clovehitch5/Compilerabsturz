G = (N, Z, T, P)

N = {Main, Deklaration, Integer, Gleitkommazahl, Charakterliste, Zahl, Buchstabe, Grossbuchstabe, Trennlinie, Typ, Ausfuehrungsteil, Deklarationsteil,
	Leerzeichen, Leerzeichen0, Bezeichner, BezeichnerDeklaration, Zuweisung, Operator, Vergleichsoperator, Inkrementierung, Operand, MathematischerAusdruck,
	Bedingung, Schleife, Anweisung, BedingteAnweisung}

T = {' ', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', '"', ':', '+', '-', '*', '/', '(', ')', '<', '>', '++', '--', '&&', '||',
	'int', 'float', 'string', 'if', 'else', 'while', 'end'}

P = {

Z ::= Deklarationsteil Trennlinie Ausfuehrungsteil .
Deklarationsteil ::= {Deklaration} .

Zahl ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
Buchstabe ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' .
Grossbuchstabe ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' .
Operator ::= '+', '-', '*', '/' .
VergleichsOperator ::= '<' | '>' | '==' | '!=' .
Inkrementierung ::= '++' | '--' .
Typ ::= 'int' | 'float' | 'string' .

Trennlinie ::= '.' '.' '.' {'.'}.

Ausfuehrungsteil ::= {Anweisung} .

Charakterliste ::= '"'{ Buchstabe | Grossbuchstabe }'"' 
		  | (Charakterliste | Bezeichner) {'+' (Bezeichner |Charakterliste | Integer | Gleitkommazahl)}  .
Integer ::= Zahl { Zahl } .
Gleitkommazahl ::= Zahl {Zahl} '.' Zahl {Zahl} .
Leerzeichen ::= ' ' | ' ' Leerzeichen .
LeerzeichenO ::= { Leerzeichen } .
Operand ::= Integer | Gleitkommazahl .

Bezeichner ::= ( Buchstabe | Grossbuchstabe ) {Buchstabe | Grossbuchstabe | Zahl } .
BezeichnerDeklaration ::= Bezeichner ['<'[Charakterliste]] ['>'] .

Anweisung ::= Bezeichner Inkrementierung | Zuweisung | BedingteAnweisung | Schleife | Deklaration | Anweisung Anweisung .

Deklaration ::=  Typ Leerzeichen BezeichnerDeklaration LeerzeichenO '=>' LeerzeichenO ( Integer | Gleitkommazahl | Charakterliste )
	       | Typ Leerzeichen BezeichnerDeklaration .

Zuweisung ::= Bezeichner LeerzeichenO '=>' LeerzeichenO ( Integer | Gleitkommazahl | Charakterliste | Bezeichner | MathematischerAusdruck ) .

MathematischerAusdruck ::= Operand | Bezeichner | MathematischerAusdruck Operator MathematischerAusdruck | '(' MathematischerAusdruck ')' .

Bedingung ::= (Bezeichner | Integer | Gleitkommazahl | Charakterliste) VergleichsOperator (Bezeichner | Integer | Gleitkommazahl | Charakterliste) | Bedingung ( '&&' | '||') Bedingung | '(' Bedingung ')' . 

BedingteAnweisung ::= 'if' '(' Bedingung ')' ':' Anweisung ['else' ':' Anweisung] .

Schleife ::= 'while' '(' Bedingung ')' ':' Anweisung 'end' .
}


####
- Bei der Zuweisung einer Zahl zu einem String wird dieser implizit die Stringdarstellung der Zahl benutzt.
- Vorangestellte Nullen bei Zahlen werden ignoriert.
- Bei der Zuweisung von Werten zu einer Variable muss die Eingabe dem Variablentyp entsprechen.
- Bevor der Variable ein Wert zugewiesen wird, muss diese deklariert werden.
- Bei der Deklaration angegebene "<" und ">" geben an, ob die Variable entweder bei Definition eingelesen (<) und/oder am Ende des Scopes ausgegeben (>) wird.
- Hinter dem "<" bei der Deklaration kann optional ein string angegeben werden, welcher vor dem Einlesen des Wertes ausgegeben wirds (Frage nach dem Wert)
- Wird ein Bezeichner in enem Mathematischen Ausdruck verwendet, so darf dieser nicht vom Typ String sein

TODO:
- Programmname
- Stringkonkaternation





